{"meta":{"title":"Samsara Young's Blog","subtitle":"黑夜给了我黑色的眼睛, 我却用它来寻找光明，还有别人路上掉落的硬币!","description":"Android","author":"Samsara Young","url":"https://samsarayoung.github.io"},"pages":[{"title":"标签","date":"2018-05-26T14:59:59.000Z","updated":"2018-05-26T15:02:05.448Z","comments":false,"path":"tags/index.html","permalink":"https://samsarayoung.github.io/tags/index.html","excerpt":"","text":""},{"title":"分类","date":"2018-05-26T14:59:59.000Z","updated":"2018-05-26T15:00:31.553Z","comments":false,"path":"categories/index.html","permalink":"https://samsarayoung.github.io/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"Android之ListView","slug":"Android之ListView","date":"2018-06-20T12:36:37.000Z","updated":"2018-07-14T17:30:03.104Z","comments":true,"path":"2018/06/20/Android之ListView/","link":"","permalink":"https://samsarayoung.github.io/2018/06/20/Android之ListView/","excerpt":"","text":"ListView可以是Android开发过程中非常常用的控件，几乎所有的应用程序都需要用到它，因此我们需要掌握ListView。ListView主要是以列表的形式来展现具体内容的并可以根据数据的长度通过滑动来显示更多的数据，当我们需要显示大量的数据的时候，我们就可以使用ListView来实现它。 ListView的基本属性列表的显示需要三个元素： 1．ListVeiw 用来展示列表的View，即item。 2．适配器Adapter 用来把数据映射到ListView上的中介。 3．数据 具体的将被映射的字符串，图片，或者基本组件。 ListView原理ListView的实现离不开Adapter。可以这么理解：ListView中给出了数据来的时候，View如何 实现的具体方式，相当于MVC中的V；而Adapter提供了相当于MVC中的C，指挥了ListView 的数据加载等行为。ListView的常用属性 android:cacheColorHint：拖动背景的缓存色，需要用图片做背景时可以将android:cacheColorHint指定为透明（#00000000）。 android:divider：使用一个Drawable或者color设置分割线样式，设置这个属性为”@null”时不显示分割线。 android:dividerHeight：设置分割线的间隔距离。 android:drawSelectorOnTop：设置这个属性为”true”时点击某一条记录，颜色会显示在最上面，记录上的文字被遮住，所以点击文字不放，文字就看不到；设置这个属性为”false”时点击某条记录不放，颜色会在记录的后面，成为背景色，但是记录内容的文字是可见的。 android:entries：设置一个资源Id，用于填充ListView的数据项。 android:fadingEdge： 设置这个属性为”none” 设置后去掉上边和下边的阴影。 android:fadeScrollbars： 设置这个属性为”true”时就可以实现滚动条的自动隐藏和显示。 android:android:fastScrollEnabled：设置这个属性为”true”时快速滚动滑块。 android:transcriptMode：设置这个属性为”alwaysScroll” 时自动滑动到最底部。 ListView的进阶ListView的优化(以异步加载Bitmap优化为例)首先概括的说ListView优化分为三级缓存: 内存缓存 文件缓存 网络读取 简要概括就是在getView中，如果加载过一个图片，放入Map类型的一个MemoryCache中(示 例代码使用的是Collections.synchronizedMap(new LinkedHashMap(10, 1.5f, true))来维护一 个试用LRU的堆)。如果这里获取不到，根据View被Recycle之前放入的TAG中记录的uri从文 件系统中读取文件缓存。如果本地都找不到，再去网络中异步加载。这里有几个注意的优化点： 从文件系统中加载图片也没有内存中加载那么快，甚至可能内存中加载也不够快。因此在ListView中应设立busy标志位，当ListView滚动时busy设为true，停止各个view的图片加载。否则可能会让UI不够流畅用户体验度降低。 文件加载图片放在子线程实现，否则快速滑动屏幕会卡。 开启网络访问等耗时操作需要开启新线程，应使用线程池避免资源浪费，最起码也要用 AsyncTask。 Bitmap从网络下载下来最好先放到文件系统中缓存。这样一是方便下一次加载根据本地 uri直接找到，二是如果Bitmap过大，从本地缓存可以方便的使用Option.inSampleSize配 合Bitmap.decodeFile(ui, options)或Bitmap.createScaledBitmap来进行内存压缩。 ListView的用法主要参考步骤及代码1) 定义一个实体类 ListViews，作为 ListView 适配器的适配类型。 2) 为 ListView 的子项指定一个我们自定义的布局 module_list_item.xml。 3) 创建一个自定义的适配器 MyListViewAdapter，这个适配器继承自 BaesAdapter。重写构造方法和 getView 方法。 4)在MainActivity中编写，初始化数据源，给ListView设置adapter。 实体类ListViews代码：123456789101112131415161718192021222324252627282930public class ListViews &#123; private String mName; private int mId; public ListViews() &#123; &#125; public ListViews(String mName, int mId) &#123; this.mName = mName; this.mId = mId; &#125; public String getName() &#123; return mName; &#125; public void setName() &#123; this.mName = mName; &#125; public int getId() &#123; return mId; &#125; public void setId() &#123; this.mId = mId; &#125;&#125; 布局文件module_activity_mylistview.xml：1234567891011121314151617&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;&lt;LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\" android:layout_width=\"match_parent\" android:layout_height=\"match_parent\" android:orientation=\"vertical\" &gt; &lt;ListView android:id=\"@+id/lv\" android:layout_width=\"match_parent\" android:layout_height=\"match_parent\" android:divider=\"#f4f4f4\" android:dividerHeight=\"1dp\" &gt; &lt;/ListView&gt;&lt;/LinearLayout&gt; 布局文件module_list_item .xml：1234567891011121314151617&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;&lt;LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\" android:orientation=\"horizontal\" android:layout_width=\"match_parent\" android:layout_height=\"match_parent\"&gt; &lt;ImageView android:id=\"@+id/iv\" android:layout_width=\"wrap_content\" android:layout_height=\"wrap_content\" android:layout_weight=\"1\" /&gt; &lt;TextView android:id=\"@+id/tv\" android:layout_width=\"0dp\" android:layout_height=\"wrap_content\" android:layout_weight=\"1\"/&gt;&lt;/LinearLayout&gt; 相应的Activity代码：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849public class MyListView extends AppCompatActivity &#123; @BindView(R.id.lv) ListView mLv; private List&lt;ListViews&gt; mArrayList = null; private Context mContext; private MyListViewAdapter mMyListViewAdapter = null; @Override protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.module_activity_mylistview); ButterKnife.bind(this); //初始化数据 init(); mContext = MyListView.this; // 创建并设置Adapter mMyListViewAdapter = new MyListViewAdapter(mContext, (LinkedList&lt;ListViews&gt;) mArrayList); mLv.setAdapter(mMyListViewAdapter); //设置item点击监听事件 mLv.setOnItemClickListener(new AdapterView.OnItemClickListener() &#123; @Override public void onItemClick(AdapterView&lt;?&gt; parent, View view, int position, long id) &#123; Toast.makeText(MyListView.this, (mArrayList.get(position).getName()), Toast.LENGTH_SHORT).show(); &#125; &#125;); &#125; private void init() &#123; mArrayList = new LinkedList&lt;ListViews&gt;(); ListViews a = new ListViews(\"周杰伦\", R.drawable.module_singer_a_normal); mArrayList.add(a); ListViews b = new ListViews(\"薛之谦\", R.drawable.module_singer_b_normal); mArrayList.add(b); ListViews c = new ListViews(\"林俊杰\", R.drawable.module_singer_c_normal); mArrayList.add(c); ListViews d = new ListViews(\"光良\", R.drawable.module_singer_d_normal); mArrayList.add(d); ListViews e = new ListViews(\"李荣浩\", R.drawable.module_singer_e_normal); mArrayList.add(e); &#125;&#125; 相应适配器MyListViewAdapter代码：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354public class MyListViewAdapter extends BaseAdapter &#123; private LinkedList&lt;ListViews&gt; mList; private LayoutInflater inflater; private ViewHolder mViewHolder; public MyListViewAdapter(Context mContext, LinkedList&lt;ListViews&gt; mList) &#123; this.mList = mList; this.inflater = LayoutInflater.from(mContext); &#125; @Override public int getCount() &#123; return mList == null ? 0 : mList.size(); &#125; @Override public Object getItem(int position) &#123; return mList == null ? null : mList.get(position); &#125; @Override public long getItemId(int position) &#123; return position; &#125; @Override public View getView(int position, View convertView, ViewGroup parent) &#123; if (convertView == null) &#123; mViewHolder = new ViewHolder(); convertView = inflater.inflate(R.layout.module_list_item, parent, false); mViewHolder.mTv = (TextView) convertView.findViewById(R.id.tv); mViewHolder.mIv = (ImageView) convertView.findViewById(R.id.iv); //储存ViewHolder convertView.setTag(mViewHolder); ; &#125; else &#123; //重新获取ViewHolder对象 mViewHolder = (ViewHolder) convertView.getTag(); &#125; mViewHolder.mIv.setImageResource(mList.get(position).getId()); mViewHolder.mTv.setText(mList.get(position).getName()); return convertView; &#125; static class ViewHolder &#123; TextView mTv; ImageView mIv; &#125;&#125; 效果如下：","categories":[{"name":"Android ，ListView","slug":"Android-，ListView","permalink":"https://samsarayoung.github.io/categories/Android-，ListView/"}],"tags":[{"name":"Android，ListView","slug":"Android，ListView","permalink":"https://samsarayoung.github.io/tags/Android，ListView/"}]},{"title":"Android 开发常用小技巧","slug":"Android-开发常用小技巧","date":"2018-05-25T09:36:37.000Z","updated":"2018-05-26T13:18:49.896Z","comments":true,"path":"2018/05/25/Android-开发常用小技巧/","link":"","permalink":"https://samsarayoung.github.io/2018/05/25/Android-开发常用小技巧/","excerpt":"","text":"总所周知，Android Studio是安卓开发最好的工具，也是现在大把多数Android开发者最主要的开发工具，因此，使用好Android Studio快捷键和插件等开发小技巧还是很有必要的。 Android Studio 快捷键格式化代码1Ctrl+Alt+L 合并成一行1Ctrl + Shift + J 全局搜索1双击Shift 布局查询1Shift + F 按关键字全局搜索1Ctrl+Shift+F 查看调用的地方1Alt+F7 代码自动修正1Alt+Enter 全局修改1Shift+F6 快速转换进行大小写1Ctrl+Shift+U 移动代码1Ctrl+Shift+上下键 向下复制1Ctrl+D 去除无用包名1Ctrl+Alt+O 代码补全1Ctrl+J 多行编辑1Alt+J Android Studio 插件1Settings → Plugin → Browse repositories Ailbaba Java Coding Guidelines 阿里巴巴自动化IDE检测开发规范 1Settings → Plugin → Browse repositories → Ailbaba Java Coding Guidelines GsonFromat json 快速生成实体类 1Alt+S ButterKnife Zelezny 一键生成注解 1Ctrl+Shift+B (鼠标需放在布局文件ID上) Lifecycle Sorter -Activiity/Fragment 生命周期排序 1Ctrl + alt + K Lint Cleaner Plugin -自动清理无用资源 1gradle lintClean Android Parcelable code generator -快速实现Parcelable 1alt + insert → Parcelable Android Studio 小技巧设置@author,@data…… -注释插入作者、日期等信息 1Setting → File and Code Templates","categories":[{"name":"Android Studio","slug":"Android-Studio","permalink":"https://samsarayoung.github.io/categories/Android-Studio/"}],"tags":[{"name":"Android","slug":"Android","permalink":"https://samsarayoung.github.io/tags/Android/"},{"name":"Android Studio","slug":"Android-Studio","permalink":"https://samsarayoung.github.io/tags/Android-Studio/"}]},{"title":"Hello World","slug":"hello-world","date":"2018-05-22T16:52:18.108Z","updated":"2018-05-26T13:31:15.517Z","comments":true,"path":"2018/05/23/hello-world/","link":"","permalink":"https://samsarayoung.github.io/2018/05/23/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[{"name":"Hexo","slug":"Hexo","permalink":"https://samsarayoung.github.io/categories/Hexo/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://samsarayoung.github.io/tags/Hexo/"}]}]}